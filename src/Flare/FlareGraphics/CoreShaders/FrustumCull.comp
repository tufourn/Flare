#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

#include "CoreShaders/BindlessCommon.glsl"

layout (set = 1, binding = 0) readonly buffer BoundsBuffer {
    Bounds bounds[];
} boundsAlias[];

layout (set = 1, binding = 0) writeonly buffer CountBuffer {
    uint count;
} countAlias[];

layout(set = 1, binding = 0) writeonly buffer OutputIndirectDrawDataBuffer {
    IndirectDrawData indirectDrawDatas[];
} outputIndirectDrawDataAlias[];

struct FrustumCullUniform {
    vec4 frustumPlanes[6];

    uint transformBufferIndex;
    uint inputIndirectDrawDataBufferIndex;
    uint outputIndirectDrawDataBufferIndex;
    uint boundsBufferIndex;

    uint countBufferIndex;
    uint drawCount;
};
layout (set = 0, binding = 0) uniform U { FrustumCullUniform frustumCullUniform; } frustumCullUniformAlias[];

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main() {
    uint currentThreadId = gl_GlobalInvocationID.x;
    FrustumCullUniform frustumCullUniform = frustumCullUniformAlias[pc.uniformOffset].frustumCullUniform;

    if (currentThreadId >= frustumCullUniform.drawCount) {
        return;
    }

    if (currentThreadId == 0) {
        atomicExchange(countAlias[frustumCullUniform.countBufferIndex].count, 0);
    }

    barrier();

    IndirectDrawData inDrawData = indirectDrawDataAlias[frustumCullUniform.inputIndirectDrawDataBufferIndex].indirectDrawDatas[currentThreadId];

    mat4 transform = transformAlias[frustumCullUniform.transformBufferIndex].transforms[inDrawData.transformOffset];

    Bounds bounds = boundsAlias[frustumCullUniform.boundsBufferIndex].bounds[currentThreadId];

    vec4 origin = (transform * vec4(bounds.origin, 1.0));
    float radius = bounds.radius * max(max(transform[0][0], transform[1][1]), transform[2][2]);

    bool isVisible = true;
    for (int i = 0; i < 6; i++) {
        vec4 plane = frustumCullUniform.frustumPlanes[i];
        if (dot(origin, plane) + radius < 0.0) {
            isVisible = false;
        }
    }

    if (isVisible) {
        uint index = atomicAdd(countAlias[frustumCullUniform.countBufferIndex].count, 1);
        outputIndirectDrawDataAlias[frustumCullUniform.outputIndirectDrawDataBufferIndex].indirectDrawDatas[index] = inDrawData;
    }
}
